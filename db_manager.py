import json
import sqlite3
import os
from datetime import datetime

class DatabaseManager:
    def __init__(self, base_project_dir, base_workspace_dir):
        """üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á Database Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Project ID (PID)"""
        self.base_project_dir = base_project_dir
        self.base_workspace_dir = base_workspace_dir

    def get_db_path(self, project_id):
        """üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á database ‡∏Ç‡∏≠‡∏á project"""
        return os.path.join(self.base_project_dir, project_id, "db.db")

    def insert_model(self, project_id, model_name , mode, model_path , validation_metrics):
        """‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô database ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ `model_id`"""
        db_path = self.get_db_path(project_id)

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS models (
            model_id TEXT PRIMARY KEY,
            model_name TEXT NOT NULL,
            mode TEXT NOT NULL,
            model_path TEXT NOT NULL,
            validation_metrics TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á model_id ‡∏î‡πâ‡∏ß‡∏¢ modelname_DDMMYY_HHMMSS
        timestamp = datetime.now().strftime("%d_%m_%y_%H_%M_%S")
        model_id = f"{model_name}_{timestamp}"
        print("Model id: "+model_id)
        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á metrics ‡πÄ‡∏õ‡πá‡∏ô JSON string (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        metrics_json = json.dumps(validation_metrics, ensure_ascii=False) if validation_metrics else None
        
        # ‚úÖ ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
        cursor.execute("""
            INSERT INTO models (model_id, model_name, mode, model_path, validation_metrics)
            VALUES (?, ?, ?, ?, ?)
        """, (model_id, model_name, mode, model_path, metrics_json))

        conn.commit()
        conn.close()

        return model_id
    def insert_prediction(self, project_id, image_name, model_name, predict_result, prediction_data):
        """
        ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á predict
        """
        db_path = self.get_db_path(project_id)

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á predict ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS predict (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            image_name TEXT NOT NULL,
            project_id TEXT NOT NULL,
            model_name TEXT NOT NULL,
            predict_result TEXT NOT NULL,
            prediction_json TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á prediction_data ‡πÄ‡∏õ‡πá‡∏ô JSON string
        prediction_json = json.dumps(prediction_data, ensure_ascii=False)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
        cursor.execute("""
            INSERT INTO predict (image_name, project_id, model_name, predict_result, prediction_json)
            VALUES (?, ?, ?, ?, ?)
        """, (image_name, project_id, model_name, predict_result, prediction_json))

        conn.commit()
        conn.close()

    def model_exists(self, project_id, model_name):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ model_name ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        db_path = self.get_db_path(project_id)
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS models (
                model_id TEXT PRIMARY KEY,
                model_name TEXT NOT NULL,
                mode TEXT NOT NULL,
                model_path TEXT NOT NULL,
                validation_metrics TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        cursor.execute("SELECT COUNT(*) FROM models WHERE model_name = ?", (model_name,))
        count = cursor.fetchone()[0]
        conn.close()

        return count > 0
    
    def get_model_info(self, project_id, model_name):
        """üîç ‡∏î‡∏∂‡∏á mode ‡πÅ‡∏•‡∏∞ model_id ‡∏Ç‡∏≠‡∏á model_name ‡∏à‡∏≤‡∏Å DB"""
        db_path = self.get_db_path(project_id)
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT model_id, mode FROM models WHERE model_name = ?", (model_name,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return {"model_id": result[0], "mode": result[1]}
        return None
    
    def insert_evaluation(self, project_id, model_name, model_id, mode, eval_result_dict):
        """‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• evaluation ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á evaluation"""
        try:
            db_path = self.get_db_path(project_id)
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS evaluation (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    model_id TEXT NOT NULL,
                    model_name TEXT NOT NULL,
                    mode TEXT NOT NULL,
                    eval_result TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)

            eval_json = json.dumps(eval_result_dict, ensure_ascii=False)

            cursor.execute("""
                INSERT INTO evaluation (model_id, model_name, mode, eval_result)
                VALUES (?, ?, ?, ?)
            """, (model_id, model_name, mode, eval_json))

            conn.commit()
            conn.close()

            return f"Evaluation inserted: model_id={model_id}, model_name={model_name}, mode={mode}"
        except Exception as e:
            raise RuntimeError(f"‚ùå Failed to insert evaluation: {str(e)}")
